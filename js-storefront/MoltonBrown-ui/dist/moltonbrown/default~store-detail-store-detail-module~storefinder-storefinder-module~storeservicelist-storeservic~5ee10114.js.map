{"version":3,"sources":["webpack:///./node_modules/agm-direction/fesm5/agm-direction.js","webpack:///./src/app/checkout-cart/googlePlace.directive.ts","webpack:///./src/app/checkout-cart/googleplacedirective.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;AAChC;;AAEjD;AACA;AACA,cAAc,oCAAoC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA,8BAA8B,0DAAY;AAC1C;AACA,kCAAkC,0DAAY;AAC9C;AACA,0BAA0B,0DAAY;AACtC;AACA,8BAA8B,0DAAY;AAC1C,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,+CAA+C;AAC/C,SAAS,OAAO,8DAAoB;AACpC,MAAM;AACN;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,uBAAuB,OAA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","file":"default~store-detail-store-detail-module~storefinder-storefinder-module~storeservicelist-storeservic~5ee10114.js","sourcesContent":["import { Directive, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { GoogleMapsAPIWrapper } from '@agm/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AgmDirection = /** @class */ (function () {\n    function AgmDirection(gmapsApi) {\n        this.gmapsApi = gmapsApi;\n        // Options\n        this.travelMode = 'DRIVING';\n        this.transitOptions = undefined;\n        this.drivingOptions = undefined;\n        this.waypoints = [];\n        this.optimizeWaypoints = true;\n        this.provideRouteAlternatives = false;\n        this.avoidHighways = false;\n        this.avoidTolls = false;\n        // Remove or draw direction\n        this.visible = true;\n        // Direction change event handler\n        this.onChange = new EventEmitter();\n        // Direction response for the new request\n        this.onResponse = new EventEmitter();\n        // Send a custom infowindow\n        this.sendInfoWindow = new EventEmitter();\n        // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\n        this.status = new EventEmitter();\n        // Marker drag event handler\n        this.originDrag = new EventEmitter();\n        this.destinationDrag = new EventEmitter();\n        this.directionsService = undefined;\n        this.directionsDisplay = undefined;\n        this.waypointsMarker = [];\n        // Use for visible flag\n        this.isFirstChange = true;\n    }\n    /**\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (this.visible === true) {\n            this.directionDraw();\n        }\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnChanges = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) {\n        /**\n         * When visible is false then remove the direction layer\n         */\n        if (!this.visible) {\n            try {\n                this.removeMarkers();\n                this.removeDirections();\n            }\n            catch (e) { }\n        }\n        else {\n            if (this.isFirstChange) {\n                /**\n                 * When visible is false at the first time\n                 */\n                if (typeof this.directionsDisplay === 'undefined') {\n                    this.directionDraw();\n                }\n                this.isFirstChange = false;\n                return;\n            }\n            /**\n             * When renderOptions are not first change then reset the display\n             */\n            if (typeof obj.renderOptions !== 'undefined') {\n                if (obj.renderOptions.firstChange === false) {\n                    this.removeMarkers();\n                    this.removeDirections();\n                }\n            }\n            this.directionDraw();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.destroyMarkers();\n        this.removeDirections();\n    };\n    /**\n     * This event is fired when the user creating or updating this direction\n     */\n    /**\n     * This event is fired when the user creating or updating this direction\n     * @return {?}\n     */\n    AgmDirection.prototype.directionDraw = /**\n     * This event is fired when the user creating or updating this direction\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.gmapsApi.getNativeMap().then(function (map) {\n            if (typeof _this.directionsDisplay === 'undefined') {\n                _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);\n                _this.directionsDisplay.setMap(map);\n                _this.directionsDisplay.addListener('directions_changed', function () {\n                    _this.onChange.emit(_this.directionsDisplay.getDirections());\n                });\n            }\n            if (typeof _this.directionsService === 'undefined') {\n                _this.directionsService = new google.maps.DirectionsService;\n            }\n            if (typeof _this.panel === 'undefined') {\n                _this.directionsDisplay.setPanel(null);\n            }\n            else {\n                _this.directionsDisplay.setPanel(_this.panel);\n            }\n            // Render exist direction\n            if (typeof _this.renderRoute === 'object' && _this.renderRoute !== null) {\n                _this.directionsDisplay.setDirections(_this.renderRoute);\n                _this.renderRoute = null; // or set undefined, ''\n            }\n            else {\n                // Request new direction\n                _this.directionsService.route({\n                    origin: _this.origin,\n                    destination: _this.destination,\n                    travelMode: _this.travelMode,\n                    transitOptions: _this.transitOptions,\n                    drivingOptions: _this.drivingOptions,\n                    waypoints: _this.waypoints,\n                    optimizeWaypoints: _this.optimizeWaypoints,\n                    provideRouteAlternatives: _this.provideRouteAlternatives,\n                    avoidHighways: _this.avoidHighways,\n                    avoidTolls: _this.avoidTolls,\n                }, function (response, status) {\n                    _this.onResponse.emit(response);\n                    // Emit Query Status\n                    _this.status.emit(status);\n                    /**\n                     * DirectionsStatus\n                     * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n                     */\n                    switch (status) {\n                        case 'OK':\n                            _this.directionsDisplay.setDirections(response);\n                            /**\n                             * Emit The DirectionsResult Object\n                             * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\n                             */\n                            // Custom Markers\n                            if (typeof _this.markerOptions !== 'undefined') {\n                                _this.destroyMarkers();\n                                // Set custom markers\n                                /** @type {?} */\n                                var _route_1 = response.routes[0].legs[0];\n                                try {\n                                    // Origin Marker\n                                    if (typeof _this.markerOptions.origin !== 'undefined') {\n                                        _this.markerOptions.origin.map = map;\n                                        _this.markerOptions.origin.position = _route_1.start_location;\n                                        _this.originMarker = _this.setMarker(map, _this.originMarker, _this.markerOptions.origin, _route_1.start_address);\n                                        if (_this.markerOptions.origin.draggable) {\n                                            _this.originMarker.addListener('dragend', function () {\n                                                _this.origin = _this.originMarker.position;\n                                                _this.directionDraw();\n                                                _this.originDrag.emit(_this.origin);\n                                            });\n                                        }\n                                    }\n                                    // Destination Marker\n                                    if (typeof _this.markerOptions.destination !== 'undefined') {\n                                        _this.markerOptions.destination.map = map;\n                                        _this.markerOptions.destination.position = _route_1.end_location;\n                                        _this.destinationMarker = _this.setMarker(map, _this.destinationMarker, _this.markerOptions.destination, _route_1.end_address);\n                                        if (_this.markerOptions.destination.draggable) {\n                                            _this.destinationMarker.addListener('dragend', function () {\n                                                _this.destination = _this.destinationMarker.position;\n                                                _this.directionDraw();\n                                                _this.destinationDrag.emit(_this.destination);\n                                            });\n                                        }\n                                    }\n                                    // Waypoints Marker\n                                    if (typeof _this.markerOptions.waypoints !== 'undefined') {\n                                        _this.waypoints.forEach(function (waypoint, index) {\n                                            // If waypoints are not array then set all the same\n                                            if (!Array.isArray(_this.markerOptions.waypoints)) {\n                                                _this.markerOptions.waypoints.map = map;\n                                                _this.markerOptions.waypoints.position = _route_1.via_waypoints[index];\n                                                _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints, _route_1.via_waypoints[index]));\n                                            }\n                                            else {\n                                                _this.markerOptions.waypoints[index].map = map;\n                                                _this.markerOptions.waypoints[index].position = _route_1.via_waypoints[index];\n                                                _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints[index], _route_1.via_waypoints[index]));\n                                            }\n                                        }); // End forEach\n                                    }\n                                }\n                                catch (err) {\n                                    console.error('MarkerOptions error.', err);\n                                }\n                            }\n                            break;\n                        default:\n                            // console.warn(status);\n                            break;\n                    } // End switch\n                });\n            }\n        });\n    };\n    /**\n     * Custom Origin and Destination Icon\n     * @param map map\n     * @param marker marker\n     * @param markerOpts properties\n     * @param content marker's infowindow content\n     * @returns new marker\n     * @memberof AgmDirection\n     */\n    /**\n     * Custom Origin and Destination Icon\n     * \\@memberof AgmDirection\n     * @param {?} map map\n     * @param {?} marker marker\n     * @param {?} markerOpts properties\n     * @param {?} content marker's infowindow content\n     * @return {?} new marker\n     */\n    AgmDirection.prototype.setMarker = /**\n     * Custom Origin and Destination Icon\n     * \\@memberof AgmDirection\n     * @param {?} map map\n     * @param {?} marker marker\n     * @param {?} markerOpts properties\n     * @param {?} content marker's infowindow content\n     * @return {?} new marker\n     */\n    function (map, marker, markerOpts, content) {\n        var _this = this;\n        if (typeof this.infoWindow === 'undefined') {\n            this.infoWindow = new google.maps.InfoWindow({});\n            this.sendInfoWindow.emit(this.infoWindow);\n        }\n        marker = new google.maps.Marker(markerOpts);\n        marker.addListener('click', function () {\n            /** @type {?} */\n            var infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\n            _this.infoWindow.setContent(infowindoContent);\n            _this.infoWindow.open(map, marker);\n        });\n        return marker;\n    };\n    /**\n     * This event is fired when remove markers\n     */\n    /**\n     * This event is fired when remove markers\n     * @return {?}\n     */\n    AgmDirection.prototype.removeMarkers = /**\n     * This event is fired when remove markers\n     * @return {?}\n     */\n    function () {\n        if (typeof this.originMarker !== 'undefined') {\n            this.originMarker.setMap(null);\n        }\n        if (typeof this.destinationMarker !== 'undefined') {\n            this.destinationMarker.setMap(null);\n        }\n        this.waypointsMarker.forEach(function (w) {\n            if (typeof w !== 'undefined') {\n                w.setMap(null);\n            }\n        });\n    };\n    /**\n     * This event is fired when remove directions\n     */\n    /**\n     * This event is fired when remove directions\n     * @return {?}\n     */\n    AgmDirection.prototype.removeDirections = /**\n     * This event is fired when remove directions\n     * @return {?}\n     */\n    function () {\n        if (this.directionsDisplay !== undefined) {\n            this.directionsDisplay.setPanel(null);\n            this.directionsDisplay.setMap(null);\n            this.directionsDisplay = undefined;\n        }\n    };\n    /**\n     * This event is fired when destroy markers\n     */\n    /**\n     * This event is fired when destroy markers\n     * @return {?}\n     */\n    AgmDirection.prototype.destroyMarkers = /**\n     * This event is fired when destroy markers\n     * @return {?}\n     */\n    function () {\n        // Remove origin markers\n        try {\n            if (typeof this.originMarker !== 'undefined') {\n                google.maps.event.clearListeners(this.originMarker, 'click');\n                if (this.markerOptions.origin.draggable) {\n                    google.maps.event.clearListeners(this.originMarker, 'dragend');\n                }\n            }\n            if (typeof this.destinationMarker !== 'undefined') {\n                google.maps.event.clearListeners(this.destinationMarker, 'click');\n                if (this.markerOptions.origin.draggable) {\n                    google.maps.event.clearListeners(this.destinationMarker, 'dragend');\n                }\n            }\n            this.waypointsMarker.forEach(function (w) {\n                if (typeof w !== 'undefined') {\n                    google.maps.event.clearListeners(w, 'click');\n                }\n            });\n            this.removeMarkers();\n        }\n        catch (err) {\n            console.error('Can not reset custom marker.', err);\n        }\n    };\n    AgmDirection.decorators = [\n        { type: Directive, args: [{\n                    selector: 'agm-direction',\n                },] }\n    ];\n    /** @nocollapse */\n    AgmDirection.ctorParameters = function () { return [\n        { type: GoogleMapsAPIWrapper }\n    ]; };\n    AgmDirection.propDecorators = {\n        origin: [{ type: Input }],\n        destination: [{ type: Input }],\n        travelMode: [{ type: Input }],\n        transitOptions: [{ type: Input }],\n        drivingOptions: [{ type: Input }],\n        waypoints: [{ type: Input }],\n        optimizeWaypoints: [{ type: Input }],\n        provideRouteAlternatives: [{ type: Input }],\n        avoidHighways: [{ type: Input }],\n        avoidTolls: [{ type: Input }],\n        renderOptions: [{ type: Input }],\n        panel: [{ type: Input }],\n        markerOptions: [{ type: Input }],\n        infoWindow: [{ type: Input }],\n        visible: [{ type: Input }],\n        renderRoute: [{ type: Input }],\n        onChange: [{ type: Output }],\n        onResponse: [{ type: Output }],\n        sendInfoWindow: [{ type: Output }],\n        status: [{ type: Output }],\n        originDrag: [{ type: Output }],\n        destinationDrag: [{ type: Output }]\n    };\n    return AgmDirection;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AgmDirectionModule = /** @class */ (function () {\n    function AgmDirectionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    AgmDirectionModule.forRoot = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: AgmDirectionModule,\n        };\n    };\n    AgmDirectionModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [],\n                    declarations: [\n                        AgmDirection,\n                    ],\n                    exports: [\n                        AgmDirection,\n                    ]\n                },] }\n    ];\n    return AgmDirectionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { AgmDirectionModule, AgmDirection as ɵa };\n//# sourceMappingURL=agm-direction.js.map\n","import { Directive, ElementRef, Output, EventEmitter, AfterViewInit } from '@angular/core';\r\ndeclare const google: any;\r\n@Directive({\r\n  selector: '[googlePlaces]'\r\n})\r\nexport class GooglePlacesDirective implements AfterViewInit {\r\n  @Output() onSelect: EventEmitter<any> = new EventEmitter();\r\n  private element: HTMLInputElement;\r\n\r\n  constructor(elRef: ElementRef) {\r\n    //elRef will get a reference to the element where\r\n    //the directive is placed\r\n    this.element = elRef.nativeElement;\r\n  }\r\n\r\n  getFormattedAddress(place) {\r\n    //@params: place - Google Autocomplete place object\r\n    //@returns: location_obj - An address object in human readable format\r\n    let location_obj = {};\r\n    for (let i in place.address_components) {\r\n      let item = place.address_components[i];\r\n      location_obj['latitude']=place.geometry.location.lat();\r\n      location_obj['longitude']=place.geometry.location.lng();\r\n     location_obj['formatted_address'] = place.formatted_address;\r\n      if(item['types'].indexOf(\"locality\") > -1) {\r\n        location_obj['locality'] = item['long_name']\r\n      } else if (item['types'].indexOf(\"administrative_area_level_1\") > -1) {\r\n        location_obj['admin_area_l1'] = item['short_name']\r\n      } else if (item['types'].indexOf(\"street_number\") > -1) {\r\n        location_obj['street_number'] = item['short_name']\r\n      } else if (item['types'].indexOf(\"route\") > -1) {\r\n        location_obj['route'] = item['long_name']\r\n      } else if (item['types'].indexOf(\"country\") > -1) {\r\n        location_obj['country'] = item['long_name']\r\n      } else if (item['types'].indexOf(\"postal_code\") > -1) {\r\n        location_obj['postal_code'] = item['short_name']\r\n      }  else if(item['types'].indexOf(\"geometry\") > -1){\r\n\r\n      }\r\n     \r\n    }\r\n    return location_obj;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const that=this;\r\n      const autocomplete = new google.maps.places.Autocomplete(this.element);\r\n      //Event listener to monitor place changes in the input\r\n      google.maps.event.addListener(autocomplete, 'place_changed', (event) => {\r\n      //Emit the new address object for the updated place\r\n      const _query = that.getFormattedAddress(autocomplete.getPlace());\r\n      console.log(_query);\r\n      if(Object.keys(_query).length !=0){\r\n        that.onSelect.emit(_query);\r\n       }\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { GooglePlacesDirective } from './googlePlace.directive';\r\nimport { NgxStarsModule } from \"ngx-stars\";\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    NgxStarsModule\r\n  ],\r\n  declarations: [GooglePlacesDirective],\r\n  exports: [\r\n    GooglePlacesDirective,\r\n    CommonModule,\r\n    FormsModule\r\n  ]\r\n})\r\nexport class GooglePlacesDirectiveModule { }\r\n"],"sourceRoot":""}